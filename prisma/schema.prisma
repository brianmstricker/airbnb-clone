// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@unique([userId, provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionToken])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  places        Place[]
  favorites     Favorite[]
  reserves      Reserve[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Place {
  id           String     @id @default(cuid())
  name         String
  address      String
  createdAt    DateTime   @default(now())
  type         String
  photos       Photo[]
  beds         Int
  baths        Int
  guests       Int        @default(1)
  description  String     @db.LongText
  perks        Perk[]
  checkInTime  String
  checkOutTime String
  price        String
  favorites    Favorite[]
  reserves     Reserve[]
  userId       String
  rating       Float      @default(0)
  trending     Boolean    @default(true)
  view         Boolean    @default(false)
  omg          Boolean    @default(false)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model Photo {
  id      String @id @default(cuid())
  url     String @db.VarChar(512)
  index   Int    @default(0) @map("index") @db.Int
  placeId String
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([placeId, url])
}

model Perk {
  id      String @id @default(cuid())
  name    String
  placeId String
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([placeId, name])
}

model Favorite {
  id        String @id @default(cuid())
  userEmail String
  placeId   String
  user      User   @relation(fields: [userEmail], references: [id], onDelete: Cascade)
  place     Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([userEmail, placeId])
  @@index([placeId])
}

model Reserve {
  id            String @id @default(cuid())
  placeId       String
  place         Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  userEmail     String
  user          User   @relation(fields: [userEmail], references: [id], onDelete: Cascade)
  guests        Int    @default(1)
  checkInDate   String
  checkOutDate  String
  price         String
  reserveStatus String @default("reserved")

  @@unique([userEmail, placeId])
  @@index([placeId])
}
